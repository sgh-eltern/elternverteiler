#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift(File.expand_path('../lib', __dir__))

require 'sequel'
Sequel::Model.db = Sequel.connect(ENV.fetch('DB'))
Sequel.extension :migration
Sequel::Migrator.run(Sequel::Model.db, 'db/migrations')

require 'sgh/elternverteiler'
include SGH::Elternverteiler
require 'sgh/elternverteiler/postmap_presenter'

Klasse.each do |klasse|
  warn "#{klasse}: #{klasse.sch端ler.count} Sch端ler, #{klasse.eltern.count} Eltern"
  puts PostmapPresenter.new("eltern-#{klasse}@schickhardt-gymnasium-herrenberg.de").present(klasse.eltern)
end

warn "Alle Eltern: #{Erziehungsberechtigter.count} Adressen"
puts PostmapPresenter.new('eltern@schickhardt-gymnasium-herrenberg.de').present(Erziehungsberechtigter.all)

elternbeirat = Rolle.where(name: '1.EV').or(name: '2.EV').map(&:mitglieder).flatten
warn "Elternbeirat: #{elternbeirat.count} Adressen"
puts PostmapPresenter.new('elternbeirat@schickhardt-gymnasium-herrenberg.de').present(elternbeirat)

evsk = Rolle.where(name: 'SK').map(&:mitglieder).flatten
warn "Elternvertreter in der Schulkonferenz: #{evsk.count} Adressen"
puts PostmapPresenter.new('elternvertreter-schulkonferenz@schickhardt-gymnasium-herrenberg.de').present(evsk)

ebv = Rolle.where(name: '1.EBV').or(name: '2.EBV').map(&:mitglieder).flatten
warn "Elternbeiratsvorsitzende: #{ebv.count} Adressen"
puts PostmapPresenter.new('elternbeiratsvorsitzende@schickhardt-gymnasium-herrenberg.de').present(ebv)

unreachable = Sch端ler.all.select { |sch| sch.eltern.collect(&:mail).compact.empty? }

if unreachable.any?
  percent = unreachable.count.to_f / Sch端ler.count * 100
  warn "Nicht per Mail erreichbar sind (#{sprintf('%.2f%', percent)}):"
  warn unreachable
end
