#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift(File.expand_path('../lib', __dir__))

require 'sequel'
Sequel::Model.db = Sequel.connect(ENV.fetch('DB'))

require 'sgh/elternverteiler'
include SGH::Elternverteiler

require 'simple-spreadsheet'
require 'ruby-progressbar'

# Not sure if this is what we get from the school ...
s = SimpleSpreadsheet::Workbook.read('elternverteiler.ods')
s.selected_sheet = s.sheets.first

progressbar = ProgressBar.create(total: s.last_row - s.first_row + 1)

s.first_row.upto(s.last_row) do |line|
  progressbar.increment

  # rubocop:disable Lint/RescueWithoutErrorClass
  begin
    klassenname = s.cell(line, 3).upcase
    klasse = case klassenname
             when /(1?\d)([A-Z])/
               Klasse.find_or_create(stufe: Regexp.last_match(1), zug: Regexp.last_match(2))
             when /J(1|2)/
               Klasse.find_or_create(stufe: 'J', zug: Regexp.last_match(1))
             else
               raise "Konnte Klasse #{klassenname} nicht in Stufe und Zug zerlegen."
             end

    child  = SchÃ¼ler.find_or_create(vorname: s.cell(line, 1), nachname: s.cell(line, 2), klasse: klasse).save

    # TODO Do not allow to create parents who do not have any information. This
    #      is probably best checked in a callback on Erziehungsberechtigter.
    parent = Erziehungsberechtigter.find_or_create(vorname: s.cell(line, 4), nachname: s.cell(line, 5), mail: s.cell(line, 6)).save
    parent.add_kinder(child) unless parent.kinder.include?(child)

    s.cell(line, 7).to_s.split('/').map(&:strip).each do |rollen_name|
      rolle = Rolle.find_or_create(name: rollen_name)
      parent.add_rollen(rolle) unless parent.rollen.include?(rolle)
    end
  rescue => error
    warn "Skipping #{child} because of: #{error.message}"
  end
end
