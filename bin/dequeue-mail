#!/usr/bin/env ruby
# frozen_string_literal: true

require 'pony'
require 'json'
require 'pathname'
require 'English'

if ARGV.empty?
  warn 'Error: Missing argument for the queue directory'
  exit 1
end

def deliver(job)
  warn job['id']
  result = Pony.mail(
    from: 'Vorstand Elternbeirat SGH <vorstand@eltern-sgh.de>',
    to: job['to'],
    subject: job['subject'],
    body: job['body'],
    html_body: job['html_body'],
    charset: 'utf-8',
    via: :smtp,
    via_options: {
      address: ENV.fetch('smtp_host'),
      port: ENV.fetch('smtp_port'),
      # tls: !!ENV.fetch('smtp_tls'),
      enable_starttls_auto: true,
      user_name: ENV.fetch('smtp_user'),
      password: ENV.fetch('smtp_password'),
      authentication: ENV.fetch('smtp_authentication'),
      domain: ENV.fetch('smtp_host'),
    }
  )
rescue StandardError
  warn "Error delivering job: #{$ERROR_INFO.message}"
  warn result
end

ARGV.map { |f| Pathname(f) }.each do |job_file|
  job = JSON.parse(job_file.read)

  if job['status'] == 'delivered'
    warn "Warning: Mail to #{job['to']} (#{job_file}) was already delivered at #{job['delivered_at']}"
    next
  end

  begin
    deliver(job)
    job['status'] = 'delivered'
    job['delivered_at'] = Time.now.utc
    job_file.write(job.to_json)
    warn "Job #{job['id']} (#{job_file}) was delivered."
  rescue StandardError => e
    warn "Error delivering #{job['id']} (#{job_file}): #{e.message}"
    job_file.write(job.merge('status' => 'failed', 'last_failed_at' => Time.now.utc, last_failure: e.message).to_json)
  end
end
