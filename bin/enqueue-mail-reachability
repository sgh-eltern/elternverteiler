#!/usr/bin/env ruby
# frozen_string_literal: true

$LOAD_PATH.unshift(File.expand_path('../lib', __dir__))

require 'bundler/setup'
require 'sequel'
require 'tilt'
require 'erb'
require 'pandoc-ruby'
require 'json'
require 'securerandom'

Sequel::Model.db = Sequel.connect(ENV.fetch('DB'))
require 'sgh/elternverteiler'

# rubocop:disable Style/MixinUsage
include SGH::Elternverteiler
# rubocop:enable Style/MixinUsage

if ARGV.empty?
  warn 'Error: Missing argument for the queue directory'
  exit 1
end

basedir = Pathname(__dir__) / '..'
queue_dir = Pathname(ARGV.first)
erb_template = Tilt.new(basedir / 'views/mail/missing.markdown.erb')

Klasse.each do |klasse|
  unreachable = klasse.schüler.select { |sch| sch.eltern.collect(&:mail).compact.reject(&:empty?).empty? }.sort_by(&:nachname)
  subject = if unreachable.count.zero?
              "Alle Schüler der #{klasse} per eMail erreichbar"
            else
              "#{unreachable.count} Schüler der #{klasse} nicht per eMail erreichbar"
            end

  to = "#{klasse.elternvertreter.mailing_list.name} <#{klasse.elternvertreter.mailing_list.address(:long)}>"
  id = SecureRandom.uuid

  erb_body = erb_template.render(
    self,
    klasse: klasse,
    unreachable: unreachable
  )

  job_file = queue_dir / id.to_s

  job_file.write({
    id: id,
    to: to,
    subject: subject,
    body: PandocRuby.convert(erb_body, from: :markdown, to: :plain),
    html_body: PandocRuby.convert(erb_body, from: :markdown, to: :html),
  }.to_json)

  warn "Mail to #{to} enqueued as #{job_file}"
end
